"策略模式总结"：
    应用场景：商场折扣（不同的折扣策略）
    简单工厂模式处理：（“优点”）将各个折扣策略类单独封装，根据用户输入的策略选项进行策略对象生成，调用计算函数。
                   （“缺点”）简单工厂模式只负责解决对象创建问题。
                            工厂类中包含了所有决策对象，实际上商场每次更改折扣决策都需要修改工厂类，代码需要不断重新编译部署

    简单工厂模式，只是负责创建对象。该模式理念可以融入到其他模式当中，可以将该模式理解为一种辅助模式。
    策略模式：
        （“策略模式的使用情况”）业务分析过程中，在不同时间应用不同规则就可以考虑使用策略模式
        （”对比“）策略模式比简单工厂模式 进一步优化了封装，客户端代码对比如下
                ”简单工厂模式“：CashSuper cs = CashFactory.createCashAccept(type);  cs.getResult();
                "策略模式"： CashContext cc = new CashContext(type);  cc.getResult();
        （"优点"）策略模式，减少了各类算法类与使用算法类之间的耦合。
                 策略模式封装了变化，在CashContext中封装好所有类，在客户端调用时都只调用cashContext.getResult()客户端是看不出变化的。